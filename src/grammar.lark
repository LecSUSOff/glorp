start: global_statement+

global_statement: import_stmt | var_decl | func_short | func_long | private | watch_stmt

local_statement:    var_decl 
                  | return_stmnt 
                  | if_stmnt 
                  | while_stmnt 
                  | for_loop 
                  | for_each 
                  | watch_stmt 
                  | var_change 
                  | call 
                  | try_stmt 
                  | throw
                  | yield_stmt
                  | switch_case
 
import_stmt: "use" name

var_decl: "let" TYPE name "=" expression
var_change: "set" name "=" expression
private: "private" TYPE name "=" expression
func_short: "fn" TYPE name "(" parameters? ")" "=>" expression
watch_stmt: "watch" TYPE name "=" expression "->" (local_statement | body)
return_stmnt: "=>" expression
switch_case: "switch" expression "->" (expression "=>" local_statement | body)* ("else" "->" local_statement | body)
take_stmt: "take" expression "from" expression

func_long: "fn" TYPE name "(" parameters? ")" body

if_stmnt:     "if" expression body ("elif" expression body )* ("else" body)?
            | "when" expression body
while_stmnt: "while" expression body
for_loop: "for" name "from" expression ("up" | "down")? "to" expression body 
for_each: "each" name "in" expression body
quick_foreach: "each" name "in" expression ("where" expression)? "->" expression ("else" expression)?
try_stmt: "try" body "catch" body
throw: "throw" expression
yield_stmt: "->" expression

body: ("{" local_statement* "}") | ("->" local_statement)

TYPE: NAME

parameters: TYPE name ("," TYPE name)*
expression: quick_foreach | logic_or

logic_or: logic_and ("or" logic_and)*
logic_and: logic_not ("and" logic_not)*
logic_not: "not" logic_not -> logic_unary_not
         | comparison
comparison: arith_exp (op_bool arith_exp)?

arith_exp: term (op_exp term)*
term: factor (op_term factor)*
factor: NUMBER
      | "-" INF     -> neg_inf
      | ("+")? INF     -> pos_inf
      | STRING
      | name
      | "(" expression ")"
      | call
      | array
      | dictionary
      | element
      | num_range
      | take_stmt

?op_exp: OP_ADD | OP_SUB
OP_ADD: "+"
OP_SUB: "-"

?op_term: OP_MUL | OP_DIV | OP_POW
OP_MUL: "*"
OP_DIV: "/" | "%" | "%%"
OP_POW: "^"

?op_bool: OP_EQ | OP_NE | OP_GT | OP_LT | OP_GE | OP_LE
OP_EQ: "=="
OP_NE: "!="
OP_GT: ">"
OP_LT: "<"
OP_GE: ">="
OP_LE: "<="

INF: "Inf" | "Infinity"

call: name "(" [arguments] ")"

array: "[" [array_elements] "]"
num_range: "[" expression "," (expression ",")? "..." "," expression "]"
dictionary: "{" dictionary_elements "}"
element: NAME "[" expression "]"

name: NAME("."NAME)*

arguments: expression ("," expression)*
array_elements: expression ("," expression)*
dictionary_element: expression ":" expression
dictionary_elements: dictionary_element ("," dictionary_element)*

%import common.CNAME
%import common.ESCAPED_STRING

%import common.CNAME -> NAME
%import common.SIGNED_NUMBER -> NUMBER
%import common.ESCAPED_STRING -> STRING
%import common.WS

SINGLE_LINE_COMMENT: /\/\/[^\n]*/
MULTI_LINE_COMMENT_STD: /\/\*[\s\S]*?\*\//

%ignore SINGLE_LINE_COMMENT
%ignore MULTI_LINE_COMMENT_STD
%import common.WS
%ignore WS